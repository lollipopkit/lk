class List {
    'items': {}
}

// ...: 插入的元素
fn List:add(...) {
    for _, v in {...} {
        self.items[#self.items] = v
    }
    rt self
}

fn List:index_of(item) {
    for idx, i in self.items {
        if i == item {
            rt idx
        }
    }
    rt -1
}

// idx: 要删除的元素的索引
fn List:remove_at(idx) {
    len := #self.items
    if idx >= len {
        errorf("index %d >= length %d", idx, len)
    }
    for i = idx, len - 1 {
        self.items[i] = self.items[i + 1]
    }
}

// val: 要删除的元素
fn List:remove(val) {
    // 倒序删除，避免删除后索引变化
    for idx = #self.items - 1, 0, -1 {
        if self.items[idx] == val {
            self:remove_at(idx)
            // 不能 break，list 不是 set，可能有相同的元素
        }
    }
}

// func: func(idx, val) -> bool
fn List:remove_where(func) {
    if func == nil {
        error("List:remove_where(func): func is nil")
    }
    idxs := new(List)
    for idx, v in self.items {
        if func(idx, v) {
            idxs:add(idx)
        }
    }
    idxs:sort()
    idxs:reverse()
    for _, idx in idxs.items {
        self:remove_at(idx)
    }
}

// ...: 包含的元素
fn List:contains(...) {
    for _, v in {...} {
        have := false
        for _, vv in self.items {
            if vv == v {
                have = true
                break
            }
        }
        if !have {
            rt false
        }
    }
    rt true
}

// idx: 插入位置
// item: 插入的元素
fn List:insert(idx, item) {
    len := #self.items
    if idx > len {
        error(fmt("Index %d out of range %d", idx, len))
    }
    for i = len - 1, idx, -1 {
        self.items[i + 1] = self.items[i]
    }
    self.items[idx] = item
}

fn List:clear() {
    self.items = {}
}

fn List:reverse() {
    len := #self.items
    for i = 0, len / 2 - 1 {
        tmp := self.items[i]
        self.items[i] = self.items[len - i - 1]
        self.items[len - i - 1] = tmp
    }
}

fn List:sort(func) {
    if func == nil {
        func = fn(a, b) {
            rt a < b
        }
    }
    len := #self.items
    if len > 1 {
        for i = 0, len - 2 {
            for j = i + 1, len - 1 {
                if func(self.items[i], self.items[j]) {
                    tmp = self.items[i]
                    self.items[i] = self.items[j]
                    self.items[j] = tmp
                }
            }
        }
    }
}

fn List:__add(other) {
    mix := new(List)
    for _, i in other.items {
        mix:add(i)
    }
    for _, i in self.items {
        mix:add(i)
    }
    rt mix
}

fn List:__sub(other) {
    for _, i in other.items {
        self:remove(i)
    }
    rt self
}

fn List:__str() {
    rt to_str(self.items)
}

fn List:__index(idx) {
    rt self.items[idx]
}

shy fn _iter(a, i) {
    i++
    v := a[i]
    if v {
       rt i, v
    }
}

fn List:__iter() {
    rt _iter, self.items, -1
}

fn List:__eq(other) {
    if #self.items != #other.items {
        rt false
    }
    for idx, i in self.items {
        if i != other.items[idx] {
            rt false
        }
    }
    rt true
}

fn List:__len() {
    rt #self.items
}

// fn List:__newindex(idx, val) {
//     self.items[idx] = val
// }

rt List
